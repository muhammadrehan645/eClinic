const int numbReadings = 30;
int readings[numbReadings];      // the readings from the analog input
int readdIndex = 0;              // the index of the current reading
int total = 0;                  // the running total
int average = 0;                // the average
float bloodsugar = 0;
int inputPin = A0;
int var = 0;
#include <OneWire.h> 
#include <DallasTemperature.h>
#define ONE_WIRE_BUS 3  
OneWire oneWire(ONE_WIRE_BUS); 
DallasTemperature sensors(&oneWire);

#define REPORTING_PERIOD_MS     500

PulseOximeter pox;

const int numReadings=10;
float filterweight=0.5;
uint32_t tsLastReport = 0;
uint32_t last_beat=0;
bool calculation_complete=false;
bool calculating=false;
bool initialized=false;
byte beat=0;


void onBeatDetected() //Calls back when pulse is detected
{
  viewBeat();
  last_beat=millis();
}

void viewBeat() 
{

  if (beat==0) {
   Serial.print("_");
    beat=1;
  } 
  else
  {
   Serial.print("^");
    beat=0;
  }
}

void initial_display() 
{
  if (not initialized) 
  {
    viewBeat();
  Serial.println(" MAX30100 Pulse Oximeter Test");
  Serial.println("******************************************");
    Serial.println("Please place your finger on the sensor");
  Serial.println("********************************************");  
    initialized=true;
  }
}

void display_calculating(int j){

  viewBeat();
  Serial.println("Measuring"); 
  for (int i=0;i<=j;i++) {
    Serial.print(". ");
  }
}

void display_values()
{
  Serial.print(average_beat);
  Serial.print("| Bpm ");
  Serial.print("| SpO2 ");
  Serial.print(average_SpO2);
  Serial.print("%"); 
  //Serial.print("|Temp:");
  //Serial.print(pox.getTemperature());
  //Serial.print("C");
}

void calculate_average(int beat, int SpO2) 
{
  if (readIndex==numReadings) {
    calculation_complete=true;
    calculating=false;
    initialized=false;
    readIndex=0;
    display_values();
  }
  
  if (not calculation_complete and beat>30 and beat<220 and SpO2>50) {
    average_beat = filterweight * (beat) + (1 - filterweight ) * average_beat;
    average_SpO2 = filterweight * (SpO2) + (1 - filterweight ) * average_SpO2;
    readIndex++;
    display_calculating(readIndex);
  }
}

void setup() 
{
  // initialize serial communication with computer:
  Serial.begin(9600);
  // initialize all the readings to 0:
 for (int thisReading = 0; thisReading < numbReadings; thisReading++) {
    readings[thisReading] = 0;
  }
  pinMode(10,INPUT);
  pinMode(11,INPUT);
  sensors.begin();
  pox.begin();
  pox.setOnBeatDetectedCallback(onBeatDetected);
}

void loop() {
  Serial.println("Press 1 for Pulse Rate and Blood oxygen level,2 for ECG Graph,, 3 for Glucometer, 4 for Body Temperature ------ Press reset button for mainmenu fucntions. ");
  while(!Serial.available()){}
  var = Serial.parseInt();
  delay(1000);
  switch (var) {
  case 1:
    while(1)
    {
    pox.update(); 
    if ((millis() - tsLastReport > REPORTING_PERIOD_MS) and (not calculation_complete)) {
        calculate_average(pox.getHeartRate(),pox.getSpO2());
        tsLastReport = millis();
    }
    if ((millis()-last_beat>10000)) 
    {
      calculation_complete=false;
      average_beat=0;
      average_SpO2=0;
      initial_display();
    }
    }
    break;
  case 2:
    while(1)
    {
      if((digitalRead(10)==1)||(digitalRead(11)==1)){
      Serial.println("No Signal");
  }
  else{
      Serial.println(analogRead(A1));
  }
  delay(100);
  delay(2);
      }
    break;
  case 3:
    while(1)
    {// subtract the last reading:
  total = total - readings[readdIndex];
  // read from the sensor:
  readings[readdIndex] = analogRead(inputPin);
  // add the reading to the total:
  total = total + readings[readdIndex];
  // advance to the next position in the array:
  readdIndex = readdIndex + 1;

  // if we're at the end of the array...
  if (readdIndex >= numbReadings) 
  {
    // ...wrap around to the beginning:
    readdIndex = 0;
  }

  // calculate the average:
  average = total / numbReadings;
  // send it to the computer as ASCII digits
  bloodsugar = average / 11.5896 ;
  Serial.print("Blood Sugar Level is:  ");
  Serial.print(bloodsugar);
  Serial.print(" mg/dL\n");
  delay(500);    
      }
    break;
  case 4:
    while(1)
    {
 Serial.print(" Requesting temperatures..."); 
 sensors.requestTemperatures(); // Send the command to get temperature readings 
 Serial.println("DONE"); 
 Serial.print("Body Temperature is: "); 
 Temp=sensors.getTempFByIndex(0);
 FTemp = Temp-9;
 CTemp = ((FTemp)-32)*(0.5556);
 delay(1000);
 Serial.print(FTemp);
 Serial.print("°F   |");
 Serial.print(CTemp);
 Serial.print("°C");
 delay(1000); 
     
    }
    break;
  default:
    // statements
    break;
}
}
